# separate terms of service, privacy policy, and support
# documentation.

# üíÅ The OpenShift Starter workflow will:
# - Checkout your repository ..
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Log in to your OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet

# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Have access to an OpenShift cluster. Refer to https://www.openshift.com/try
# 2. Create the OPENSHIFT_SERVER and OPENSHIFT_TOKEN repository secrets. Refer to:
#   - https://github.com/redhat-actions/oc-login#readme
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with 'üñäÔ∏è' if the defaults are not suitable for your project.
# 4. (Optional) Edit the build-image step to build your project.
#    The default build type is by using a Dockerfile at the root of the repository,
#    but can be replaced with a different file, a source-to-image build, or a step-by-step buildah build.
# 5. Commit and push the workflow file to your default branch to trigger a workflow run.

# üëã Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: OpenShift Everywhere

env:
  # üñäÔ∏è EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  ROSA_SERVER: ${{ secrets.ROSA_SERVER }}
  ROSA_TOKEN: ${{ secrets.ROSA_TOKEN }}
  ARO_SERVER: ${{ secrets.ARO_SERVER }}
  ARO_TOKEN: ${{ secrets.ARO_TOKEN }}
  GCP_SERVER: ${{ secrets.GCP_SERVER }}
  GCP_TOKEN: ${{ secrets.GCP_TOKEN }}
  OCP_SERVER: ${{ secrets.ROSA_SERVER_PROD }}
  OCP_TOKEN: ${{ secrets.ROSA_TOKEN_PROD }}
  ARO_LIVE: ${{ vars.ARO_LIVE }}
  GCP_LIVE: ${{ vars.GCP_LIVE }}
  ROSA_LIVE: ${{ vars.ROSA_LIVE }}
  # üñäÔ∏è EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: ""

  # üñäÔ∏è EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: "hello"

  # üñäÔ∏è EDIT with the port your application should be accessible on.
  # If the container image exposes *exactly one* port, this can be left blank.
  # Refer to the 'port' input of https://github.com/redhat-actions/oc-new-app
  APP_PORT: ""

  # üñäÔ∏è EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY_USER: "andyrepton"
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.QUAY_TOKEN }}

  # üñäÔ∏è EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
  push:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "develop" ]

jobs:
  image-ci-cd:
    name: Build and push to quay
    runs-on: ubuntu-22.04
    environment: build

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    
    # https://github.com/redhat-actions/buildah-build#readme
    - name: Build
      id: build_image
      uses: redhat-actions/s2i-build@v2
      with:
        path_context: '.'
        builder_image: 'registry.access.redhat.com/ubi9/go-toolset'
        image: 'andyrepton/hello'
    

    # https://github.com/redhat-actions/push-to-registry#readme
    - name: Push to Quay
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build_image.outputs.image }}
        tags: ${{ steps.build_image.outputs.tags }}
        registry: quay.io/${{ env.IMAGE_REGISTRY_USER }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}

  rosa-deploy:
    name: ROSA Deployment
    if: ${{ vars.ROSA_LIVE == 'true' }}
    runs-on: ubuntu-22.04
    needs: image-ci-cd

    steps:
    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.ROSA_SERVER }}
        openshift_token: ${{ env.ROSA_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    - name: Create and expose app
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}
        image: ${{ needs.image-ci-cd.outputs.FEND_IMAGE }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}
        build_env: |
          CLOUD_REGION=eu-west-1
          OPENSHIFT_TYPE=rosa
          CLOUD_TYPE=aws

    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""

  on-prem-deploy:
    name: On-Prem Deployment
    if: ${{ vars.ONPREM_LIVE == 'true' }}
    runs-on: ubuntu-22.04
    needs: image-ci-cd

    steps:
    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OCP_SERVER }}
        openshift_token: ${{ env.OCP_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    - name: Create and expose app
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}
        image: ${{ needs.image-ci-cd.outputs.FEND_IMAGE }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}
        build_env: |
          CLOUD_REGION=Germany
          OPENSHIFT_TYPE=OCP
          CLOUD_TYPE=On-Premise

    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
